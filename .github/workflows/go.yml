# This workflow will build and test a Go project
# For more information on GitHub Actions workflows, see:
# https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-go

name: Go CI Workflow

on:
  push:
    branches:
      - "main"    # Runs the workflow when there is a push to the main branch
  pull_request:
    branches:
      - "main"    # Runs the workflow when a PR is created or updated with the main branch

jobs:
  build:
    runs-on: ubuntu-latest   # The environment where the job will run (Ubuntu in this case)

    steps:
      # Checkout the repository code
      - name: Checkout code
        uses: actions/checkout@v4

      # Set up Go environment
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.20'    # Specify the Go version to use (update it based on your Go version)

      # Cache Go modules to speed up the workflow
      - name: Cache Go modules
        uses: actions/cache@v3
        with:
          path: ~/.cache/go-build
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      # Install Go dependencies (optional but useful for large projects)
      - name: Install dependencies
        run: go mod tidy  # Run go mod tidy to ensure modules are installed

      # Build the Go project (compile the code)
      - name: Build
        run: go build -v ./...   # Builds the Go project, including all packages in the repository

      # Run Go tests to make sure everything is working as expected
      - name: Test
        run: go test -v ./...    # Runs the tests and shows verbose output

    # Optionally, you can add linting step here
    # - name: Lint Go code
    #   run: golangci-lint run

    # Optionally, you can also upload the build artifact to GitHub (e.g. for deployment)
    # - name: Upload build artifact
    #   uses: actions/upload-artifact@v2
    #   with:
    #     name: go-build-artifact
    #     path: ./your-build-output-directory
